{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hools/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","valueInput","setValue","onSubmit","e","preventDefault","trim","length","categories","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gifInfo","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MA6BeA,MA1Bf,YAAyC,IAAlBC,EAAiB,EAAjBA,cACnB,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAS,MAKb,SACI,uBACIO,MAAOR,EACPS,SAAU,SAACN,GAAD,OAAOF,EAASE,EAAEO,OAAOF,a,+BCnBtCG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEJC,EAAOD,EAAKE,KAAI,SAAAC,GAChB,MAAO,CACHC,GAAID,EAAQC,GACZC,MAAOF,EAAQE,MACfV,IAAKQ,EAAQG,OAAOC,iBAAiBZ,QAT1B,kBAYZM,GAZY,4CAAH,sDCeLO,EAbK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBACIC,IAAKf,EACLgB,IAAI,gBAER,4BAAIN,QCgBDO,EAtBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEf,ECHwB,SAACA,GACzB,MAA0Bb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAACX,GACpBS,EAAS,CACLf,KAAMM,EACNO,SAAS,SAGlB,CAACpB,IAEGqB,EDZ2BI,CAAazB,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAiB,GACP,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,aEdtC,SAASgB,IACpB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQS,EAAWc,KAAI,SAAAT,GACX,OACI,cAAC,EAAD,CAEIA,SAAUA,GADLA,WCnBrC,IAYe4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAACV,EAAD,IACAW,SAASC,eAAe,SAM1BX,M","file":"static/js/main.c40d972b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nfunction AddCategory({ setCategories }) {\n    const [valueInput, setValue] = useState('')\n\n    const onSubmitEvent = (e) => {\n        e.preventDefault()\n\n        if (valueInput.trim().length > 2) {\n            setCategories(categories => [valueInput, ...categories])\n            setValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={onSubmitEvent}>\n            <input\n                value={valueInput}\n                onChange={(e) => setValue(e.target.value)}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory;","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=RlcoiW8wPSvTwhfcyS21nA9YQv7pKT55&limit=10`\n    const response = await fetch(url)\n    const { data } = await response.json()\n\n    let gifs = data.map(gifInfo => {\n        return {\n            id: gifInfo.id,\n            title: gifInfo.title,\n            url: gifInfo.images.downsized_medium.url\n        }\n    })\n    return gifs\n}","import React from 'react'\n\nconst GifGridItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img\n                src={url}\n                alt=\"Cargando...\"\n            />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem","import React from 'react'\nimport { useFetchGifs } from '../hools/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nconst GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category)\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Cargando..</p>}\n\n            <div className=\"card-grid\">\n\n                {\n                    images.map(img => {\n                        return <GifGridItem key={img.id} {...img} />\n                    })\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category).then((images) => {\n            setState({\n                data: images,\n                loading: false\n            })\n        })\n    }, [category])\n\n    return state\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nexport default function GifExpertApp() {\n    const [categories, setCategories] = useState([\"One Punch\"])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n\n            <AddCategory setCategories={setCategories} />\n\n            <ol>\n                {\n                    categories.map(category => {\n                        return (\n                            <GifGrid\n                                key={category}\n                                category={category}\n                            />\n                        )\n                    })\n                }\n            </ol>\n        </>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}